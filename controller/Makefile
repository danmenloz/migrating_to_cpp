##########################################################################################################################
# File automatically-generated by tool: [projectgenerator] version: [4.1.0] date: [Sat Oct 07 23:41:20 EDT 2023]
##########################################################################################################################

# ------------------------------------------------
# Generic Makefile (based on gcc)
#
# ChangeLog :
#	2017-02-10 - Several enhancements + project update mode
#   2015-07-22 - first version
# ------------------------------------------------

######################################
# target
######################################
TARGET = controller


######################################
# building variables
######################################
# debug build?
DEBUG = 1
# optimization
OPT = -Og


#######################################
# paths
#######################################
# Build path
BUILD_DIR = firmware/build
EXE_DIR = bin

######################################
# source
######################################
# C++ sources
CPP_SOURCES =  \
firmware/app/main_cpp.cpp \

# C sources
C_SOURCES =  \
firmware/stm32/Core/Src/main.c \
firmware/stm32/Core/Src/stm32l4xx_it.c \
firmware/stm32/Core/Src/stm32l4xx_hal_msp.c \
firmware/stm32/Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_dfsdm.c \
firmware/stm32/Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal.c \
firmware/stm32/Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_i2c.c \
firmware/stm32/Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_i2c_ex.c \
firmware/stm32/Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c \
firmware/stm32/Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc_ex.c \
firmware/stm32/Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_flash.c \
firmware/stm32/Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_flash_ex.c \
firmware/stm32/Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_flash_ramfunc.c \
firmware/stm32/Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_gpio.c \
firmware/stm32/Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_dma.c \
firmware/stm32/Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_dma_ex.c \
firmware/stm32/Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c \
firmware/stm32/Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr_ex.c \
firmware/stm32/Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_cortex.c \
firmware/stm32/Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_exti.c \
firmware/stm32/Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_qspi.c \
firmware/stm32/Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_spi.c \
firmware/stm32/Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_spi_ex.c \
firmware/stm32/Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_tim.c \
firmware/stm32/Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_tim_ex.c \
firmware/stm32/Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_uart.c \
firmware/stm32/Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_uart_ex.c \
firmware/stm32/Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pcd.c \
firmware/stm32/Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pcd_ex.c \
firmware/stm32/Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_ll_usb.c \
firmware/stm32/Core/Src/system_stm32l4xx.c  

# ASM sources
ASM_SOURCES =  \
firmware/stm32/startup_stm32l475xx.s


#######################################
# binaries
#######################################
PREFIX = arm-none-eabi-
# The gcc compiler bin path can be either defined in make command via GCC_PATH variable (> make GCC_PATH=xxx)
# either it can be added to the PATH environment variable.
ifdef GCC_PATH
CPP = $(GCC_PATH)/$(PREFIX)g++
CC = $(GCC_PATH)/$(PREFIX)gcc
AS = $(GCC_PATH)/$(PREFIX)gcc -x assembler-with-cpp
CP = $(GCC_PATH)/$(PREFIX)objcopy
SZ = $(GCC_PATH)/$(PREFIX)size
else
CPP = $(PREFIX)g++
CC = $(PREFIX)gcc
AS = $(PREFIX)gcc -x assembler-with-cpp
CP = $(PREFIX)objcopy
SZ = $(PREFIX)size
endif
HEX = $(CP) -O ihex
BIN = $(CP) -O binary -S
 
#######################################
# CFLAGS
#######################################
# cpu
CPU = -mcpu=cortex-m4

# fpu
FPU = -mfpu=fpv4-sp-d16

# float-abi
FLOAT-ABI = -mfloat-abi=hard

# mcu
MCU = $(CPU) -mthumb $(FPU) $(FLOAT-ABI)

# macros for gcc
# AS defines
AS_DEFS = 

# C++ defines
CPP_DEFS =  \
-DUSE_HAL_DRIVER \
-DSTM32L475xx

# C defines
C_DEFS =  \
-DUSE_HAL_DRIVER \
-DSTM32L475xx

# AS includes
AS_INCLUDES = 

# C++ includes
CPP_INCLUDES =  \
-Ifirmware/app \
-Ifirmware/cfg \
-Ifirmware/drv \
-Ifirmware/lib \
-Ifirmware/stm32/Core/Inc \
-Ifirmware/stm32/Drivers/STM32L4xx_HAL_Driver/Inc \
-Ifirmware/stm32/Drivers/STM32L4xx_HAL_Driver/Inc/Legacy \
-Ifirmware/stm32/Drivers/CMSIS/Device/ST/STM32L4xx/Include \
-Ifirmware/stm32/Drivers/CMSIS/Include

# C includes
C_INCLUDES =  \
-Ifirmware/stm32/Core/Inc \
-Ifirmware/stm32/Drivers/STM32L4xx_HAL_Driver/Inc \
-Ifirmware/stm32/Drivers/STM32L4xx_HAL_Driver/Inc/Legacy \
-Ifirmware/stm32/Drivers/CMSIS/Device/ST/STM32L4xx/Include \
-Ifirmware/stm32/Drivers/CMSIS/Include


# compile gcc flags
ASFLAGS = $(MCU) $(AS_DEFS) $(AS_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections
CFLAGS += $(MCU) $(C_DEFS) $(C_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections

CPPFLAGS += $(MCU) $(CPP_DEFS) $(CPP_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections
CPPFLAGS += -std=c++11 -fno-rtti -fno-exceptions -lstdc++

ifeq ($(DEBUG), 1)
CFLAGS += -g3 -gdwarf-2
CPPFLAGS += -g3 -gdwarf-2
endif

# Generate dependency information
CFLAGS += -MMD -MP -MF"$(@:%.o=%.d)"
CPPFLAGS += -MMD -MP -MF"$(@:%.o=%.d)"

#######################################
# LDFLAGS
#######################################
# link script
LDSCRIPT = firmware/ld/STM32L475VGTx_FLASH.ld

# libraries
LIBS = -lc -lm -lnosys 
LIBDIR = 
LDFLAGS = $(MCU) -specs=nano.specs -T$(LDSCRIPT) $(LIBDIR) $(LIBS) -Wl,-Map=$(EXE_DIR)/$(TARGET).map,--cref -Wl,--gc-sections

# default action: build all
all: $(EXE_DIR)/$(TARGET).elf $(EXE_DIR)/$(TARGET).hex $(EXE_DIR)/$(TARGET).bin


#######################################
# build the application
#######################################
# list of C objects
OBJECTS = $(addprefix $(BUILD_DIR)/,$(notdir $(C_SOURCES:.c=.o)))
vpath %.c $(sort $(dir $(C_SOURCES)))
# list of C++ objects
OBJECTS += $(addprefix $(BUILD_DIR)/,$(notdir $(CPP_SOURCES:.cpp=.o)))
vpath %.cpp $(sort $(dir $(CPP_SOURCES)))
# list of ASM program objects
OBJECTS += $(addprefix $(BUILD_DIR)/,$(notdir $(ASM_SOURCES:.s=.o)))
vpath %.s $(sort $(dir $(ASM_SOURCES)))

$(BUILD_DIR)/%.o: %.cpp Makefile | $(BUILD_DIR) 
	$(CPP) -c $(CPPFLAGS) -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:.cpp=.lst)) $< -o $@

$(BUILD_DIR)/%.o: %.c Makefile | $(BUILD_DIR) 
	$(CC) -c $(CFLAGS) -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:.c=.lst)) $< -o $@

$(BUILD_DIR)/%.o: %.s Makefile | $(BUILD_DIR)
	$(AS) -c $(CFLAGS) $< -o $@

$(EXE_DIR)/$(TARGET).elf: $(OBJECTS) Makefile
	$(CPP) $(OBJECTS) $(LDFLAGS) -o $@
	$(SZ) $@

$(EXE_DIR)/%.hex: $(EXE_DIR)/%.elf | $(BUILD_DIR)
	$(HEX) $< $@
	
$(EXE_DIR)/%.bin: $(EXE_DIR)/%.elf | $(BUILD_DIR)
	$(BIN) $< $@	
	
$(BUILD_DIR):
	mkdir $@		
	mkdir $(EXE_DIR)	

#######################################
# clean up
#######################################
clean:
	-rm -fR $(BUILD_DIR)
	-rm -fR $(EXE_DIR)

#######################################
# phony targets
#######################################

.PHONY: docker_image
docker_image:
	docker build -t mendez/cpp-dev .

.PHONY: docker_run
docker_run:
	docker run --rm -it --privileged -v "$(pwd):/home/app" mendez/cpp-dev:latest bash	

.PHONY: format
format: 
	clang-format --style=Google -i $(CPP_SOURCES)

.PHONY: cppcheck
cppcheck:
	cppcheck --enable=all --inconclusive --std=c++17 --suppress=missingIncludeSystem $(CPP_SOURCES)

.PHONY: unit_tests
unit_tests: 
	$(MAKE) -j CC=gcc -f cpputest.mk

#######################################
# dependencies
#######################################
-include $(wildcard $(BUILD_DIR)/*.d)

# *** EOF ***